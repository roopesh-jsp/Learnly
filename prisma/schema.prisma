generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// EXISTING MODELS (NextAuth)
//
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  credits         Int            @default(5) 
  // relations with new models
  userTasks UserTask[]
  roadmaps  Roadmap[]       @relation("UserRoadmaps")
  cloned    ClonedRoadmap[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

//
// NEW MODELS (Roadmaps)
//
model Roadmap {
  id          String       @id @default(uuid())
  title       String
  description String?
  isPublic    Boolean      @default(false)
  ownerId     String       

  owner       User         @relation("UserRoadmaps", fields: [ownerId], references: [id], onDelete: Cascade)
  microtasks  Microtask[]
  clones      ClonedRoadmap[]
}

model Microtask {
  id        String   @id @default(uuid())
  title     String
  roadmapId String

  roadmap   Roadmap  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Task {
  id          String     @id @default(uuid())
  title       String
  microtaskId String

  microtask   Microtask  @relation(fields: [microtaskId], references: [id], onDelete: Cascade)
  userTasks   UserTask[]
}

model UserTask {
  id      String @id @default(uuid())
  userId  String
  taskId  String
  done    Boolean @default(false)

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
}

model ClonedRoadmap {
  id        String   @id @default(uuid())
  userId    String   
  roadmapId String   
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roadmap   Roadmap  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)

  @@unique([userId, roadmapId]) // a user can clone only once
}
